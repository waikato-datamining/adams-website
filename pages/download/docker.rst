.. title: Docker
.. slug: docker
.. date: 2023-08-07 13:11:00 UTC+12:00
.. tags: 
.. category: 
.. link: 
.. description: 
.. type: text
.. author: FracPete

`Docker <https://www.docker.com/>`__ is a great way of deploying applications
for processing data, running webservices, etc., all nicely packaged up in a container.
Java applications can be packaged with Docker as well and ADAMS is no exception.
If you are looking for an introduction to Docker, then have a look at our:

`Docker for Data Scientists <https://www.data-mining.co.nz/docker-for-data-scientists/>`__


Pre-built images
----------------

Once a week, our build server pushes out the current snapshots to the public
Docker Hub registry, so you do not have to do this. These images are built
on top of an Ubuntu Linux distribution, with ADAMS installed from the Debian 
packages that also get generated by our build server.

These pre-built docker images are available from the following location:

`hub.docker.com/u/waikatodatamining/ <https://hub.docker.com/u/waikatodatamining>`__

Currently, the following ADAMS snapshots get packaged in Docker images:

* adams-base-all
* adams-addons-all
* adams-ml-app
* adams-spectral-app

These images have the following scripts:

* *SNAPSHOT*-gui - Starts the ADAMS user interface (requires a local X-Server, see below)
* *SNAPSHOT*-exec - Executes a flow using the `adams.flow.FlowRunner` class
* *SNAPSHOT*-daemon - Like `*-exec` it uses the `FlowRunner` class, but runs it the background with a scripting engine.
  This scripting engine is then used for stopping the background flow.


The following docker command will spin up a container of the *adams-ml-app*
image and map the current directory to the `/workspace` directory inside the
container (*-v `pwd`:/workspace*). By using the local user's user ID and group ID (*-u $(id -u):$(id -g)*),
we won't have any problems with permissions on any files that may get generated
by the ADAMS system in the */workspace* directory from within the container.
For ADAMS to work correctly within the container, we have to set a few environment
variables (*ADAMS_...* and *WEKA_HOME*), pointing to the right directories and user name.

.. code::

   docker run \
       --rm \
       --pull always \
       -u $(id -u):$(id -g) \
       -e USER=$USER \
       -e ADAMS_USERNAME=$USER \
       -e ADAMS_USERDIR=/workspace \
       -e ADAMS_USERHOME=/workspace \
       -e ADAMS_HOME=/workspace/adams \
       -e "ADAMS_PLACEHOLDERS=FLOWS=/workspace;EXAMPLE_FLOWS=/workspace" \
       -e WEKA_HOME=/workspace/wekafiles \
       -v `pwd`:/workspace \
       -it waikatodatamining/adams-ml-app:latest

Once the container is up and running, we can grab a flow and its relevant data for execution.
In the same directory from which you started the container, execute the following commands:

.. code::

   mkdir data
   wget -O data/anneal.arff https://github.com/waikato-datamining/adams-base/raw/master/adams-weka/src/main/flows/data/anneal.arff
   wget -O adams-weka-build_classifier.flow https://github.com/waikato-datamining/adams-base/raw/master/adams-weka/src/main/flows/adams-weka-build_classifier.flow

And now we can execute the flow as follows:

.. code::

   adams-ml-app-exec \
     -headless true \
     -clean-up true \
     -i adams-weka-build_classifier.flow


Local X-Server
==============

If not already done in the current session, you need to expose your xhost in
order to allow the Docker container to display the ADAMS user interface using 
your local X-Server:

.. code::

   xhost +local:root

Add the following two options to your docker command-line to pass through the X-Server:

.. code::

   -e "DISPLAY" \
   -v "/tmp/.X11-unix:/tmp/.X11-unix"

You can then start up the user interface from the console using `SNAPSHOT-gui`.
In case of the `adams-ml-app` snapshot, this would be `adams-ml-app-gui`.

Once you have closed ADAMS in an interactive container (`-i`), you can exit
the container with the *exit* (or just use *Ctrl+D*) command.

**NB:** These instructions assume that you have docker installed on your
Linux machine. See the `MOA blog post <https://moa.cms.waikato.ac.nz/how-to-use-moa-in-docker/>`__
for details on getting the X-Server working on Windows and Mac OSX.


Custom images
-------------

However, these pre-built base images may not suit your needs, as they may
be too large or lacking functionality that you need. If you want to 
containerize a single worker flow, then you can have a look at the
*adamsflow2docker* library:

`github.com/waikato-datamining/adamsflow2docker <https://github.com/waikato-datamining/adamsflow2docker>`__

This project generates a *Dockerfile* from a list of ADAMS modules (and 
version) that the application should be comprised of and executes the specified
flow inside the image using the *adams.flow.FlowRunner* class.

